head	1.16;
access;
symbols;
locks
	george:1.16; strict;
comment	@# @;


1.16
date	2011.08.11.19.54.29;	author george;	state Exp;
branches;
next	1.15;

1.15
date	2011.04.14.23.13.20;	author george;	state Exp;
branches;
next	1.14;

1.14
date	2011.02.06.01.12.28;	author george;	state Exp;
branches;
next	1.13;

1.13
date	2011.02.05.06.55.26;	author george;	state Exp;
branches;
next	1.12;

1.12
date	2011.02.04.02.14.01;	author george;	state Exp;
branches;
next	1.11;

1.11
date	2011.02.03.01.47.35;	author george;	state Exp;
branches;
next	1.10;

1.10
date	2010.10.11.23.03.01;	author george;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.09.23.49.51;	author george;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.08.22.17.48;	author george;	state Exp;
branches;
next	1.7;

1.7
date	2010.09.05.22.48.53;	author george;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.28.09.17.42;	author george;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.26.07.41.49;	author george;	state Exp;
branches;
next	1.4;

1.4
date	2010.08.24.23.58.58;	author george;	state Exp;
branches;
next	1.3;

1.3
date	2010.08.23.11.08.19;	author george;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.23.06.17.10;	author george;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.21.04.16.20;	author george;	state Exp;
branches;
next	;


desc
@@


1.16
log
@*** empty log message ***
@
text
@class OrderController < ApplicationController
 layout "lark"
 include HTTParty
 base_uri 'localhost:3000'

  def index 
  #The content of the cart will be serialized and saved in a memo. Its format is totally up to the user. In this case it is an array of hashes.
   @@cart_items = [
            {:song_name=>"the Desert Moon", :id => 1, :price => 12.0, :qty => 3.00},
            {:song_name=>"Hymalayan winds ", :id => 2, :price => 1.0, :qty => 3.0}, 
            {:song_name=>"Pine away", :id => 3, :price => 1.0, :qty => 1.0},
           ]
   session[:cart] = @@cart_items.to_json
  end
 # 
  def new
  @@order_items = JSON.parse session[:cart]
  #get an single_access_token
  @@user_id = 11 
  @@api_key  = self.class.get("/users/#{@@user_id}/rekey.json",  :digest_auth => {:username => "term1", :password => "1234"}) 
  if @@api_key.grep(/Access Denied/).empty?
   session[:api_key] = @@api_key
  else
   flash[:notice] = @@api_key
   redirect_to :back
  end
  end
 # 
  def create
     items = JSON.parse session[:cart]
     sum = items.inject(0.0){ |sum, i| sum + i['price'].to_f * i['qty'].to_f }
     order = {
               :memo => session[:cart], #serialize items and save it to memo field.
               :sum_total => sum,
               :buyer_id => params[:buyer_id] || '4', #buyer's phone number
               :pin => params[:pin] || '1234' #buyer's PIN.
             }
  result = self.class.post("/orders.json", 
                       :body => { :checkout => order, :order_type=> 'checkout', :user_credentials => session[:api_key]})
   if result['status'] == 'success'
   redirect_to(:action => 'show', :id => result['id']) 
   else
   flash[:notice] = result['errors']
   redirect_to(:action => 'index') 
   end
  end
 #  
 def show
  result = self.class.get("/orders/#{params[:id]}.json", :query => { :user_credentials => session[:api_key]})
  if @@order = result["order"]
     @@payments = result['payments']
     @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
  else
   flash[:notice] = result
   redirect_to :action=>'index' 
  end
 end 
 # 
  def trade_in
      payment = { 'order_id' => params[:order_id], 'product_id' => params[:product_id], 'qty' => params[:qty] }
   result = self.class.post("/payments.json", :body=> { :payment => payment, :user_credentials => session[:api_key]})
   if @@order = result["order"]
      @@payments = result['payments']
      @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
   else
    flash[:notice] = result
   end
      respond_to do |format|
      format.html {render :action => 'show'} 
      format.js
      end
  end
 #
  def trade_out
      payment_id = params[:id]
   result = self.class.delete("/payments/#{payment_id}.json", :query => { :user_credentials => session[:api_key]})
   if @@order = result["order"]
    @@payments = result['payments']
    @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
   else
    flash[:notice] = result
   end
   respond_to do |format|
      format.html {render :action => 'show'} 
      format.js
   end
  end
 #
  def update 
  id = params['id'] 
  checkout = { "flat_p_code" => params['flat_p_code']} 
  result = self.class.put("/orders/#{id}.json",
                   :body => {:commit=>params[:commit], :id=>id, :checkout=>checkout , :user_credentials => session[:api_key]})
   if result['status'] == 'success'
   flash[:notice] = "Success! Order #{params[:commit]}."
   redirect_to(:action => 'show', :id => result['id']) 
   else
   flash[:notice] = result["errors"]
   redirect_to(:action => 'show', :id => result['id']) 
   end
  end
 #
end
@


1.15
log
@*** empty log message ***
@
text
@d35 1
a35 1
               :mobile => params[:mobile] || '9196095443', #buyer's phone number
@


1.14
log
@*** empty log message ***
@
text
@d19 2
a20 3
  options = { :digest_auth => {:username => "terminal_1", :password => "1234"} }
  @@user_id = 18
  @@api_key  = self.class.get("/users/#{@@user_id}/rekey.json", options)
@


1.13
log
@*** empty log message ***
@
text
@d9 3
a11 3
            {:song_name=>"the Desert Moon", :id => 1, :price => 12, :qty => 3},
            {:song_name=>"Hymalayan winds ", :id => 2, :price => 1, :qty => 3}, 
            {:song_name=>"Pine away", :id => 3, :price => 1, :qty => 1},
d61 1
a61 1
      payment = { 'procurement_id' => params[:procurement_id], 'product_id' => params[:product_id], 'qty' => params[:qty] }
@


1.12
log
@*** empty log message ***
@
text
@d11 1
a11 1
            {:song_name=>"Pine away", :id => 3, :price => 1, :qty => 3},
@


1.11
log
@*** empty log message ***
@
text
@d17 11
a27 6
   @@order_items = JSON.parse session[:cart]
 #get an single_access_token
 options = { :digest_auth => {:username => "terminal_1", :password => "1234"} }
 @@user_id = 18
 @@api_key  = self.class.get("/users/#{@@user_id}/rekey.json", options)
  session[:api_key] = @@api_key
d51 7
a57 3
  @@order = result["order"]
  @@payments = result['payments']
  @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
d63 7
a69 4
   @@order = result["order"]
   @@payments = result['payments']
   @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
   respond_to do |format|
d72 1
a72 1
   end
d78 6
a83 3
   @@order = result["order"]
   @@payments = result['payments']
   @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
@


1.10
log
@*** empty log message ***
@
text
@d19 3
a21 2
 options = { :digest_auth => {:username => "wala", :password => "1234"} }
 @@api_key  = self.class.get('/users/142/rekey.json', options)
@


1.9
log
@*** empty log message ***
@
text
@a28 1
               :order_type => 'checkout',
@


1.8
log
@*** empty log message ***
@
text
@d75 1
a75 1
  def execute
d77 3
a79 3
  p_code = params['flat_p_code'] 
  result = self.class.put("/orders/#{id}/execute.json",
                   :body => {:flat_p_code => p_code , :user_credentials => session[:api_key]})
d81 1
a81 1
   flash[:notice] = "Success! Order executed."
a88 13
  def destroy 
  id = params['id'] 
  p_code = params['flat_p_code'] 
  result = self.class.delete("/orders/#{params[:id]}.json", 
                   :query => {:flat_p_code => p_code , :user_credentials => session[:api_key]})
   if result['status'] == 'success'
   flash[:notice] = "Success! Order cancelled."
   redirect_to(:action => 'show', :id => result['id']) 
   else
   flash[:notice] = result['errors']
   redirect_to(:action => 'show', :id => result['id']) 
   end
  end
@


1.7
log
@*** empty log message ***
@
text
@d39 2
a40 2
   flash[:notice] = result[:errors]
   redirect_to(:action => 'cart') 
@


1.6
log
@FMC
@
text
@d6 1
a6 1
  def cart 
d50 1
a50 2
 #
 #  
d77 1
a77 1
  p_code = params['buy_code'] 
d79 1
a79 1
                   :body => {:buy_code => p_code , :user_credentials => session[:api_key]})
d84 15
a98 1
   flash[:notice] = result[:errors]
@


1.5
log
@switched to httparty.
cleansed typhoeus out of my system.
@
text
@d45 1
a45 1
  result = self.class.get("/orders/987.json", :query => { :user_credentials => session[:api_key]})
d53 1
a53 1
      payment = { 'order_id' => params[:order_id], 'product_id' => params[:product_id], 'qty' => params[:qty] }
d86 1
a86 1
   redirect_to(:action => 'cart') 
@


1.4
log
@*** empty log message ***
@
text
@d2 3
a4 1
  layout "lark"
d15 1
a15 1
# 
d18 6
a23 8
  #get an single_access_token
   @@api_key = get_single_access_token 'wala', '1234', 'localhost:3000', 142
   session[:api_key] = @@api_key
  end
#  create result => {:order, :payment, :pay_options} 
#order => { :id, :created_at, :updated_at, :order_type, :memo, :sum_total, :buyer, :seller, :creator, :executor }
#payments =>[{:id, :product_id, :price, :qty, :name}]
#pay_options => [{:ticket, :product_id}]
d34 2
a35 2
   result = create_order(order, "localhost:3000")
   logger.info "-----create_order result= #{result.class}"
d45 4
a48 7
   url = 'localhost:3000'
      r = Typhoeus::Request.get("http://#{url}/orders/#{params[:id]}.json",
                   :params => { :user_credentials => session[:api_key]})
   result = JSON.parse r.body
   @@order = result["order"]
   @@payments = result['payments']
   @@pay_options = result['pay_options'].collect{| p | [p['ticket'], p['product_id']]  }
d54 1
a54 2
      url = 'localhost:3000'
      result = add_payment(payment, url) 
a57 1
   #render :action => 'show' 
d66 1
a66 2
      url = 'localhost:3000'
      result = remove_payment(payment_id, url) 
d79 2
a80 5
  r = Typhoeus::Request.put("http://localhost:3000/orders/#{id}/execute.json",
                   :params => {:buy_code => p_code , :user_credentials => session[:api_key]})
   #display_response r
   result = parse_response r
   logger.info "execute result= #{result}"
a85 1
   @@result = result
a88 62
  
 private
 # 
  def remove_payment payment_id, url
      r = Typhoeus::Request.delete("http://#{url}/payments/#{payment_id}.json",
                   :params => { :user_credentials => session[:api_key]})
      JSON.parse r.body
  end
 #
  def add_payment payment, url 
      r = Typhoeus::Request.post("http://#{url}/payments.json",
                   :params => { :payment => payment, :user_credentials => session[:api_key]})
      JSON.parse r.body
  end
 #
  def create_order order, url
   api_key = session[:api_key]
   r = Typhoeus::Request.post("http://localhost:3000/orders.json",
                   :params => { :checkout => order, :order_type=> 'checkout', :user_credentials => api_key})
   url_params = { :checkout => order, :order_type=> 'checkout', :user_credentials => api_key}.to_param
   logger.info "-------->url_params =#{url_params}"
   #display_response r
   #result = JSON.parse r.body
   result = parse_response r
   logger.info "create result= #{result}"
   return result 
  end
 # nickname: web service client's nickname, not buyer's.
 # password: web service client's PIN.
 # user_id: web service client's user_id
 # server_url: web service provider url.
  def get_single_access_token nickname, password, server_url, user_id
      auth = {:username => nickname, #|| "wala", #terminal username
              :password => password, #|| "1234", #terminal pin number
              :method => Typhoeus::Easy::AUTH_TYPES[:CURLAUTH_DIGEST]}

           headers = {"Accept"=>'application/json,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
           url = "http://#{server_url}/users/#{user_id}/rekey.json"
           api_key = 'Initial Value'
           e = Typhoeus::Easy.new
           e.auth, e.url, e.headers = auth, "http://localhost:3000/users/142/rekey.json", headers
           e.on_success { api_key = e.response_body }
           Typhoeus.add_easy_request(e)
           Typhoeus.perform_easy_requests 
           return api_key
  end 
 #
  def display_response r
  logger.info "response.code: #{r.code}"    # http status code
  logger.info "response.time: #{r.time}"    # time in seconds the request took
  logger.info "response.headers: #{r.headers}" # the http headers
  #logger.info "response.headers_hash: #{r.headers_hash.to_yaml}" # http headers put into a hash
  logger.info "response.body: #{r.body}"    # the response body
  end
 # 
  def parse_response r
  if r.code == 200
   return JSON.parse(r.body)
  else
   return r.body
  end 
  end
@


1.3
log
@*** empty log message ***
@
text
@d118 2
@


1.2
log
@*** empty log message ***
@
text
@a48 1
   #logger.info result.to_yaml
d83 3
a85 3
            id = params['id'] 
            p_code = params['buy_code'] 
      r = Typhoeus::Request.put("http://localhost:3000/orders/#{id}/execute.json",
d87 11
a97 1
      render :text => r.body
d118 4
a121 2
   display_response r
   result = JSON.parse r.body
d148 10
a157 2
  logger.info "response.headers_hash: #{r.headers_hash.to_yaml}" # http headers put into a hash
  logger.info "response.body: #{r.body.to_yaml}"    # the response body
@


1.1
log
@Initial revision
@
text
@d34 8
a41 2
   order_id = create_order(order, "localhost:3000" )
   redirect_to :action => 'show', :id => order_id 
a103 1
  
d108 4
a111 4
                   :params => { :order => order, :user_credentials => api_key})
   order_id = r.body
   logger.info "New checkout order created id=#{order_id}" 
   return order_id 
d118 2
a119 2
      auth = {:username => nickname, #|| "wala", #client username
              :password => password, #|| "1234", #client pin number
d132 8
@
